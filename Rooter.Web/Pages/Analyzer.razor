@page "/analyzer"
@using Rooter.Application.Interfaces
@using Rooter.Domain.Entities

<PageTitle>Dependency Analyzer - NuGet Dependency Analyzer</PageTitle>

<h1>NuGet Dependency Analyzer</h1>
<p>Analyze NuGet package dependencies by pointing to a repository - we'll auto-detect all project.assets.json files.</p>

<div class="card mt-4">
    <div class="card-header">
        <h4>Repository Auto-Detect</h4>
    </div>
    <div class="card-body">
        <div class="input-group mb-3">
            <input type="text" class="form-control" placeholder="C:\path\to\repository" @bind="_repositoryPath" />
            <button class="btn btn-success" type="button" @onclick="_AnalyzeRepository">Auto-Detect & Analyze</button>
        </div>
        <div class="mt-3">
            <button class="btn btn-secondary" @onclick="_LoadExample">Load Example</button>
        </div>
    </div>
</div>

@if (_isLoading)
{
    <div class="mt-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <span class="ms-2">@_loadingMessage</span>
    </div>
}

@if (!string.IsNullOrEmpty(_errorMessage))
{
    <div class="alert alert-danger mt-4" role="alert">
        @_errorMessage
    </div>
}

@if (_dependencyGraph != null)
{
    <div class="graph-container mt-4">
        <h2>Dependency Analysis Results</h2>
        <div class="row">
            <div class="col-md-6">
                <p><strong>Project:</strong> @_dependencyGraph.ProjectName</p>
                <p><strong>Target Framework:</strong> @_dependencyGraph.TargetFramework</p>
            </div>
            <div class="col-md-6">
                <p><strong>Total Packages:</strong> @_dependencyGraph.Packages.Count</p>
                <p><strong>Total Dependencies:</strong> @_dependencyGraph.Dependencies.Count</p>
            </div>
        </div>

        <div class="row mt-4">
            <div class="col-md-6">
                <h3>Direct Dependencies</h3>
                <div class="package-list">
                    @{
                        var directDeps = _dependencyGraph.Packages.Values.Where(p => p.IsDirectDependency).OrderBy(p => p.Name);
                    }
                    @if (directDeps.Any())
                    {
                        <ul class="list-group">
                            @foreach (var package in directDeps)
                            {
                                <li class="list-group-item direct-dependency">
                                    @package.Name v@package.Version
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">No direct dependencies found.</p>
                    }
                </div>
            </div>
            <div class="col-md-6">
                <h3>Transitive Dependencies</h3>
                <div class="package-list">
                    @{
                        var transitiveDeps = _dependencyGraph.Packages.Values.Where(p => !p.IsDirectDependency).OrderBy(p =>
                        p.Name);
                    }
                    @if (transitiveDeps.Any())
                    {
                        <ul class="list-group">
                            @foreach (var package in transitiveDeps.Take(20))
                            {
                                <li class="list-group-item transitive-dependency">
                                    @package.Name v@package.Version
                                </li>
                            }
                            @if (transitiveDeps.Count() > 20)
                            {
                                <li class="list-group-item text-muted">
                                    ... and @(transitiveDeps.Count() - 20) more
                                </li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p class="text-muted">No transitive dependencies found.</p>
                    }
                </div>
            </div>
        </div>

        @if (_versionConflicts.Any())
        {
            <div class="mt-4">
                <h3>Version Conflicts</h3>
                <div class="alert alert-warning">
                    <ul class="mb-0">
                        @foreach (var conflict in _versionConflicts)
                        {
                            <li>
                                <strong>@conflict.Key:</strong> @string.Join(", ", conflict.Value)
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }

        <div class="mt-4">
            <h3>Package Dependency Visualization</h3>
            <div class="card">
                <div class="card-header">
                    <h5 class="mb-0">Select Package to Visualize</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <div class="input-group">
                                <input type="text" class="form-control" placeholder="Search for a package..."
                                    @bind="_searchTerm" @oninput="_OnSearchInputChanged" list="packageOptions" />
                                <datalist id="packageOptions">
                                    @foreach (var package in _filteredPackageOptions)
                                    {
                                        <option value="@package.DisplayName">@package.Name v@package.Version</option>
                                    }
                                </datalist>
                                <button class="btn btn-primary" type="button" @onclick="_GenerateChart">
                                    Generate Chart
                                </button>
                            </div>
                            @if (_allPackageOptions.Any())
                            {
                                <div class="mt-2 text-muted small">
                                    @_allPackageOptions.Count total packages available. Type to search or select from dropdown.
                                </div>
                            }
                        </div>
                        <div class="col-md-4">
                            <div class="form-check">
                                <input class="form-check-input" type="checkbox" id="showAllVersions"
                                    @bind="_showAllVersions" @bind:after="_OnShowAllVersionsChanged" />
                                <label class="form-check-label" for="showAllVersions">
                                    Show all versions
                                </label>
                            </div>
                        </div>
                    </div>
                    @if (!string.IsNullOrEmpty(_selectedPackageInfo))
                    {
                        <div class="mt-3 alert alert-info">
                            <strong>Selected:</strong> @_selectedPackageInfo
                        </div>
                    }
                </div>
            </div>

            @if (!string.IsNullOrEmpty(_mermaidChart))
            {
                <div class="mt-4" id="chartSection">
                    <div class="card" id="chartCard">
                        <div class="card-header d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Dependency Graph</h5>
                            <div class="chart-controls">
                                <span class="zoom-level-display me-3" id="zoomLevel">100%</span>
                                <button class="btn btn-sm btn-outline-success" onclick="toggleFullscreen()" id="fullscreenBtn"
                                    title="Toggle Fullscreen">
                                    <i class="fas fa-expand"></i>
                                </button>
                            </div>
                        </div>
                        <div class="card-body p-0">
                            <div class="mermaid-container-wrapper">
                                <!-- Fullscreen package selector (hidden by default) -->
                                <div class="fullscreen-package-selector" id="fullscreenPackageSelector" style="display: none;">
                                    <div class="input-group">
                                        <input type="text" class="form-control" placeholder="Search for a package..."
                                            @bind="_searchTerm" @oninput="_OnSearchInputChanged"
                                            list="packageOptionsFullscreen" />
                                        <datalist id="packageOptionsFullscreen">
                                            @foreach (var package in _filteredPackageOptions)
                                            {
                                                <option value="@package.DisplayName">@package.Name v@package.Version</option>
                                            }
                                        </datalist>
                                        <button class="btn btn-primary" type="button" @onclick="_GenerateChart">
                                            Generate Chart
                                        </button>
                                    </div>
                                    @if (!string.IsNullOrEmpty(_selectedPackageInfo))
                                    {
                                        <div class="mt-2 alert alert-info mb-0">
                                            <strong>Selected:</strong> @_selectedPackageInfo
                                        </div>
                                    }
                                </div>

                                <div class="interaction-hint">
                                    <small class="text-muted">💡 Drag to pan • Scroll to zoom • Double-click to reset</small>
                                </div>
                                <div class="mermaid-container" id="mermaidContainer">
                                    <div id="mermaidChart" class="mermaid-chart">
                                        @((MarkupString)_mermaidChart)
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}